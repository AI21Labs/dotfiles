# 077 would be more secure, but 022 is generally quite realistic
umask 022

# OS variables
[ $(uname -s) = "Darwin" ] && export OSX=1
[ $(uname -s) = "Linux" ] && export LINUX=1
uname -s | grep -q "_NT-" && export WINDOWS=1

# Colorful manpages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Set to avoid `env` output from changing console colour
export LESS_TERMEND=$'\E[0m'

# Qt development
export QTEST_COLORED=1

# KDAB development
export KDABSVN='svn+ssh://mike@svn.kdab.com/home/SVN-klaralv'
export KDABGIT='gitolite@git.kdab.com'

# Setup paths
add_to_path() {
	[ -d $1 ] && export PATH="$1:$PATH"
}

add_to_path /usr/local/bin
add_to_path /usr/local/sbin
add_to_path $HOME/Documents/Scripts
add_to_path $HOME/Scripts
add_to_path $HOME/.gem/ruby/1.8/bin

# Count CPUs for Make jobs
if [ $OSX ]
then
	export CPUCOUNT=$(sysctl -n hw.ncpu)
elif [ $LINUX ]
then
	export CPUCOUNT=$(getconf _NPROCESSORS_ONLN)
else
	export CPUCOUNT="1"
fi

if [ "$CPUCOUNT" -gt 1 ]
then
	export MAKEFLAGS="-j$CPUCOUNT"
fi

# Aliases
alias su="/bin/su -"
alias scp="scp -r"
alias mkdir="mkdir -vp"
alias df="df -H"
alias rm="rm -iv"
alias mv="mv -iv"
alias cp="cp -irv"
alias du="du -sh"
alias less="less -r"
alias wget="wget -c"
alias watch="watch -n1"
alias make="nice make"
alias ps="ps aux"

alias_if_exists() {
	which $2 1>/dev/null 2>/dev/null && alias $1=$2
}

alias_if_exists ack ack-grep
alias_if_exists diff colordiff

# Upload files to various locations
scp_to_http() {
	USER="$1"
	UPLOADHOST="$2"
	WWWDIR="$3"
	if [ -z "$5" ]
	then
		FILEPATH="$4"
	else
		HTTPPATH="$4"
		FILEPATH="$5"
	fi

	FILENAME=$(basename "$FILEPATH")
	HTTPFILE=${FILENAME//" "/"%20"}

	if [ -z "$HTTPPATH" ]
	then
		HTTP="http://$UPLOADHOST/~$USER/$HTTPFILE"
	else
		HTTP="$HTTPPATH/$HTTPFILE"
	fi

	SCP="$USER@$UPLOADHOST:$WWWDIR/"
	scp "$FILEPATH" "$SCP"
	if [ $? -ne 0 ]
	then
		echo "$FILEPATH failed to upload to $SCP"
	else
		echo "$FILEPATH uploaded to $HTTP"

		if [ $OSX ]
		then
			echo $HTTP | pbcopy
			echo "URL copied to clipboard."
		fi
	fi
}

alias upkdab="scp_to_http mike swanson.kdab.com public_html"
alias upjoanna="scp_to_http mike joanna.kdab.com public_html"
alias upmike="scp_to_http mike mikemcquaid.com Sites"
alias upbrew="scp_to_http mikemcquaid,machomebrew frs.sourceforge.net /home/frs/project/m/ma/machomebrew/Bottles https://downloads.sourceforge.net/project/machomebrew/Bottles"

# Connect to existing ssh agents when available
unalias ssh 2>/dev/null
unalias scp 2>/dev/null

check_ssh_agent() {
	[ -z "$SSH_AUTH_SOCK" ] && eval $(ssh-agent) && ssh-add
}

ssh_with_agent() {
	check_ssh_agent
	ssh $@
}

scp_with_agent() {
	check_ssh_agent
	scp $@
}

alias ssh="ssh_with_agent"
alias scp="scp_with_agent"

git_branch() {
	BRANCH_REFS=$(git symbolic-ref HEAD 2>/dev/null) || return
	echo "${BRANCH_REFS#refs/heads/}"
}

svn_branch() {
	[ -d .svn ] || return
	SVN_INFO=$(svn info 2>/dev/null) || return
	SVN_BRANCH=$(echo $SVN_INFO | grep URL: | grep -oe '\(trunk\|branches/[^/]\+\|tags/[^/]\+\)')
	[ -n "$SVN_BRANCH" ] && echo "$SVN_BRANCH"
}

svn_root() {
	[ -d .svn ] || (echo "No .svn directory found" && return)

	OLDPWD=$PWD
	while [ -d ../.svn ]
	do
		cd ..
	done

	SVN_URL=$(svn info 2>/dev/null | grep URL: | sed -e 's/URL: //')
	CURRENT_BRANCH=$(svn_branch)
	SVN_ROOT=${SVN_URL%$CURRENT_BRANCH}
	echo "$SVN_ROOT"
	cd $OLDPWD
}

# Makes changing branches in Subversion more like Git
svn_change() {
	NEW_BRANCH="$1"
	[ -n "$NEW_BRANCH" ] || (echo "No branch specified" && return)
	[ -d .svn ] || (echo "No .svn directory found" && return)

	SVN_ROOT=$(svn_root)

	if [ $NEW_BRANCH != "trunk" ]
	then
		echo "Searching branches for $NEW_BRANCH"
		for BRANCH in $(svn ls ${SVN_ROOT}/branches)
		do
			[ "$NEW_BRANCH/" != $BRANCH ] && continue
			FOUND_BRANCH="branches/$BRANCH"
			break
		done

		if [ -z "$FOUND_BRANCH" ]
		then
			echo "Searching tags for $NEW_BRANCH"
			for TAG in $(svn ls ${SVN_ROOT}/tags)
			do
				[ "$NEW_BRANCH/" != $TAG ] && continue
				FOUND_BRANCH="tags/$TAG"
				break
			done
		fi

		if [ -z "$FOUND_BRANCH" ]
		then
			echo "Could not find a branch or tag named $NEW_BRANCH"
			cd $OLDPWD
			return
		else
			NEW_BRANCH="$FOUND_BRANCH"
		fi
	fi

	OLDPWD=$PWD
	while [ -d ../.svn ]
	do
		cd ..
	done

	echo svn switch "$SVN_ROOT$NEW_BRANCH"
	svn switch "$SVN_ROOT$NEW_BRANCH"
	cd $OLDPWD
}

unalias svn 2>/dev/null
svn_git_emulation() {
	case "$1" in
		log)
			svn $@|less
			;;
		branch)
			SVN_ROOT=$(svn_root)
			echo "Branches:"
			svn ls ${SVN_ROOT}/branches
			echo
			echo "Tags:"
			svn ls ${SVN_ROOT}/tags
			;;
		*)
			svn $@
			;;
	esac
}
alias svn="svn_git_emulation"

# Platform-specific stuff
export EDITOR="vim"

if [ $OSX ]
then
	if [ -n "${DISPLAY}" ]
	then
		alias vim="vicotool"
		export EDITOR="vicotool"
		export GIT_EDITOR="vicotool -w"
		export SVN_EDITOR=$GIT_EDITOR
	fi
	alias grep="grep --color=auto"
	alias ls="ls -F -G"
	alias brew="nice brew"
	alias bpi="brew pull --install"
# Matches Cygwin or MINGW
elif [ $WINDOWS ]
then
	open() {
		cmd /C"$*"
	}
fi

# Run dircolors if it exists
which dircolors 1>/dev/null && eval $(dircolors -b)

# Aliases using variables
alias ed="$EDITOR"
